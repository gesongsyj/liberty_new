package com.liberty.system.model;

import java.util.ArrayList;
import java.util.List;

import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.SqlPara;
import com.liberty.system.model.base.BaseLine;
import com.liberty.system.model.base.BaseStroke;
import com.liberty.system.query.StrokeQueryObject;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Line extends BaseLine<Line> {
	public static final Line dao = new Line().dao();
	
	private List<Stroke> allStrokes=new ArrayList<Stroke>();
	
	public void updateStroke(){
		Db.batchUpdate(allStrokes, 5000);
		allStrokes.clear();
	}
	
	public boolean saveOrUpdate(int currencyId,String type) {
		if(this.getId()!=null) {
			return update(currencyId,type);
		}else {
			return save(currencyId, type);
		}
	}
	
	public boolean update(int currencyId,String type) {
		try {
			super.update();
			List<Stroke> strokes = Stroke.dao.getByDateRange(currencyId,type,this.getStartDate(),this.getEndDate());
			for (Stroke stroke : strokes) {
				stroke.setLineId(this.getId());
				allStrokes.add(stroke);
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public boolean save(int currencyId,String type){
		try {
			this.setCurrencyId(currencyId);
			this.setType(type);
			super.save();
			List<Stroke> strokes = Stroke.dao.getByDateRange(currencyId,type,this.getStartDate(),this.getEndDate());
			for (Stroke stroke : strokes) {
				stroke.setLineId(this.getId());
				allStrokes.add(stroke);
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public Page<Line> paginate(StrokeQueryObject qo) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("qo", qo));
		return dao.paginate(qo.getCurrentPage(), qo.getPageSize(), sqlPara);
	}
	
	public Line getLast() {
		String sql = getSqlFromTemplate();
		Line line = dao.findFirst(sql);
		return line;
	}

	public Line getLastByCode(String code, String type) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("code", code).set("type", type));
		Line line = dao.findFirst(sqlPara);
		return line;
	}

	public List<Line> listAll() {
		String sql = getSqlFromTemplate();
		List<Line> list = dao.find(sql);
		return list;
	}

	public List<Line> listAllByCode(String code, String type) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("code", code).set("type", type));
		List<Line> list = dao.find(sqlPara);
		return list;
	}
}
