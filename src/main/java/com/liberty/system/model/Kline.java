package com.liberty.system.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.jfinal.aop.Before;
import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.SqlPara;
import com.jfinal.plugin.activerecord.tx.Tx;
import com.liberty.common.utils.stock.MACD;
import com.liberty.system.model.base.BaseKline;
import com.liberty.system.query.KlineQueryObject;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Kline extends BaseKline<Kline> {
    // 日K线
    public static final String KLINE_TYPE_K = "k";
    // 30分钟K线
    public static final String KLINE_TYPE_M30K = "m30k";

    // 买点
    public static final String BUY_POINT = "0";
    // 卖点
    public static final String SALE_POINT = "1";

    public static final Kline dao = new Kline().dao();

    public Page<Kline> paginate(KlineQueryObject qo) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("qo", qo));
        return dao.paginate(qo.getCurrentPage(), qo.getPageSize(), sqlPara);
    }

    public Kline getLastOneByCurrencyId(int currencyId, String type) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type));
        Kline kline = dao.findFirst(sqlPara);
        return kline;
    }

    public Kline getLastOneByCurrencyIdAndDate(int currencyId, String type, Date date) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type).set("date", date));
        Kline kline = dao.findFirst(sqlPara);
        return kline;
    }

    public List<Kline> getLast2ByCurrencyId(int currencyId, String type) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type));
        List<Kline> list = dao.find(sqlPara);
        return list;
    }

    public List<Kline> getLastSomeByCurrencyId(int currencyId, String type, int limit) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type).set("limit",limit));
        List<Kline> klines = dao.find(sqlPara);
        return klines;
    }

//    @Before(Tx.class)
    public void saveMany(Map<String, List<Kline>> klineMap, Map<String, Kline> lastKlineMap) {
        MACD macd = new MACD();// 计算macd红绿柱的值
//        List<Kline> allKlines = new ArrayList<Kline>();
        for (String code : klineMap.keySet()) {
            List<Kline> list = klineMap.get(code);
            Kline lastKline = lastKlineMap.get(code);
            if (lastKline != null) {
                Iterator<Kline> it = list.iterator();
                while (it.hasNext()) {
                    Kline kline = it.next();
                    if (kline.getDate().getTime() <= lastKline.getDate().getTime()) {
                        it.remove();
                    }
                }
            }
            macd.calMacd(list, lastKline);
//            allKlines.addAll(list);
            Db.batchSave(list, 1000);
//            allKlines.clear();
        }
    }

    public List<Kline> listAllByCurrencyId(int currencyId, String type) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type));
        List<Kline> list = dao.find(sqlPara);
        return list;
    }

    public List<Kline> listAllByCurrencyIdBeforeDate(int currencyId, String type, Date date) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type).set("date", date));
        List<Kline> list = dao.find(sqlPara);
        return list;
    }

    public List<Kline> getListAfterDate(int currencyId, String type, Date date) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type).set("date", date));
        List<Kline> list = dao.find(sqlPara);
        return list;
    }

    public List<Kline> getByDateRange(int currencyId, String type, Date startDate, Date endDate) {
        SqlPara sqlPara = getSqlParaFromTemplate(
                Kv.by("currencyId", currencyId).set("type", type).set("startDate", startDate).set("endDate", endDate));
        List<Kline> list = dao.find(sqlPara);
        return list;
    }

    public List<Kline> getByCurrencyId(String currencyId) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId));
        List<Kline> list = dao.find(sqlPara);
        return list;
    }

    public List<Kline> listBeforeDate(int currencyId, String type, Date date, int limit) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type).set("date", date).set("limit", limit));
        List<Kline> list = dao.find(sqlPara);
        return list;
    }

    public void deleteByCurrencyId(int currencyId) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId));
        int update = Db.update(sqlPara);
    }

    public Kline getByDate(int currencyId, String type, Date date) {
        SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId).set("type", type).set("date", date));
        Kline kline = dao.findFirst(sqlPara);
        return kline;
    }
}
