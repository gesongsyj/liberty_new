package com.liberty.system.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.SqlPara;
import com.liberty.common.utils.MACD;
import com.liberty.system.model.base.BaseKline;
import com.liberty.system.query.KlineQueryObject;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Kline extends BaseKline<Kline> {
	public static final Kline dao = new Kline().dao();

	public Page<Kline> paginate(KlineQueryObject qo) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("qo", qo));
		return dao.paginate(qo.getCurrentPage(), qo.getPageSize(), sqlPara);
	}

	public Kline getLastOneByCode(String code, String type) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("code", code).set("type", type));
		Kline kline = dao.findFirst(sqlPara);
		return kline;
	}
	
	public List<Kline> getLastByCode(String code, String type) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("code", code).set("type", type));
		List<Kline> list = dao.find(sqlPara);
		return list;
	}

	public void saveMany(Map<String, List<Kline>> klineMap, Map<String, Kline> lastKlineMap) {
		MACD macd = new MACD();// 计算macd红绿柱的值
		List<Kline> allKlines = new ArrayList<Kline>();
		for (String code : klineMap.keySet()) {
			List<Kline> list = klineMap.get(code);
			Kline lastKline = lastKlineMap.get(code);
			if (lastKline != null) {
				Iterator<Kline> it = list.iterator();
				while (it.hasNext()) {
					Kline kline = it.next();
					if (kline.getDate().getTime() <= lastKline.getDate().getTime()) {
						it.remove();
					}
				}
			}
			macd.calMacd(list, lastKline);
			allKlines.addAll(list);
		}
		Db.batchSave(allKlines, 5000);
	}

	public List<Kline> listAllByCode(String code, String type) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("code", code).set("type", type));
		List<Kline> list = dao.find(sqlPara);
		return list;
	}

	public List<Kline> getListByDate(String code, String type, Date date) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("code", code).set("type", type).set("date", date));
		List<Kline> list = dao.find(sqlPara);
		return list;
	}

	public List<Kline> getByDateRange(String code, String type, Date startDate, Date endDate) {
		SqlPara sqlPara = getSqlParaFromTemplate(
				Kv.by("code", code).set("type", type).set("startDate", startDate).set("endDate", endDate));
		List<Kline> list = dao.find(sqlPara);
		return list;
	}

	public List<Kline> listAll() {
		String sql = getSqlFromTemplate();
		List<Kline> list = dao.find(sql);
		return list;
	}

	public List<Kline> getByCurrencyId(String currencyId) {
		SqlPara sqlPara = getSqlParaFromTemplate(Kv.by("currencyId", currencyId));
		List<Kline> list = dao.find(sqlPara);
		return list;
	}

}
